syntax = "proto3";
option go_package = "github.com/shaunnope/go-jaguard/zouk";

enum OperationType {
    READ = 0;
    WRITE = 1;
    DELETE = 2;
}

message Zxid {
    int64 epoch = 1;
    int64 counter = 2;
}

message Transaction {
    Zxid zxid = 1;
    string path = 2;
    bytes data = 3;
    string flags = 4;
    OperationType type = 5;
}

message Ping {
    int64 data = 1;
}

// dynamic zookeeper nodes
message AddNodeRequest {
    string server = 1;
}

message AddNodeResponse {}

message RemoveNodeRequest {
    string server = 1;
}

message RemoveNodeResponse {}
// end dynamic zookeeper nodes

// election
message Vote {
    Zxid lastZxid = 1;
    int64 id = 2;
}

message ElectNotification {
    Vote vote = 1;
    int64 id = 2;
    int64 state = 3;
    int64 round = 4;
}

message ElectResponse {
    int64 state = 1;
}
// end election

// zab
message FollowerInfo {
    int64 id = 1;
    Zxid lastZxid = 2;
}

message NewEpoch {
    int64 epoch = 1;
}

message AckEpoch {
    int64 currentEpoch = 1;
    repeated Transaction history = 2;
    Zxid lastZxid = 3;
}

message NewLeader {
    int64 epoch = 1;
    repeated Transaction history = 2;
    Zxid lastZxid = 3;
}

message AckLeader {
    int64 epoch = 1;
}

// end zab

// read/write

message ZabRequest {
    Transaction transaction = 1;
    RequestType requestType = 2;
}

message ZabAck {
    ZabRequest request = 1;
}

message ReadResponse {
    bytes data = 1;
    string flags = 2;
    Zxid zxid = 3;
}


message CreateRequest {
    string path = 1;
    bytes data = 2;
    string flags = 3;
    RequestType requestType = 4;
}

message CreateResponse {
    optional bool accept = 1;
    optional CreateRequest CR = 2;
}

enum RequestType{
    PROPOSAL = 0;
    ANNOUNCEMENT = 1;
    CLIENT = 3;
}




service Node {
    rpc SendPing (Ping) returns (Ping);

    rpc AddNode (AddNodeRequest) returns (AddNodeResponse);
    rpc RemoveNode (RemoveNodeRequest) returns (RemoveNodeResponse);

    rpc Elect (ElectNotification) returns (ElectResponse);

    rpc InformLeader (FollowerInfo) returns (Ping);
    rpc ProposeEpoch (NewEpoch) returns (AckEpoch);
    rpc ProposeLeader (NewLeader) returns (AckLeader);

    rpc SendZabRequest (ZabRequest) returns (ZabAck);
    
    rpc Create(CreateRequest) returns (CreateResponse);
}